#pragma once
// https://javl.github.io/image2cpp/

#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-function"

static void render_tux(void) {
    static const char PROGMEM tux_bitmap[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xde, 0x3f, 0xff, 0xff, 
0x1f, 0xdf, 0x3f, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x3f, 0x09, 0x10, 0x24, 0x01, 
0x18, 0x01, 0x08, 0x0f, 0x3f, 0xff, 0xfc, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x07, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x00, 0x00, 0x00, 
0xc0, 0x00, 0x00, 0x88, 0x20, 0x01, 0x11, 0x83, 0x0c, 0x18, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x00, 0x0b, 0x1f, 0x1f, 0x0f, 0x45, 0x03, 0x80, 0x00, 0x00, 
0x00, 0x06, 0x00, 0x04, 0x04, 0x09, 0x08, 0x00, 0x14, 0x11, 0x08, 0x0a, 0x0e, 0x06, 0x06, 0x06, 
0x06, 0x06, 0x07, 0x07, 0x07, 0x0d, 0x18, 0x10, 0x09, 0x08, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00
};
    oled_write_raw_P(tux_bitmap, sizeof(tux_bitmap));
}

enum BITMAPS_ENUM {
    TUX_BITMAP,
    BITMAPS_COUNT
};

// https://docs.qmk.fm/features/oled_driver


static void render_layers(void) {
    // Host Keyboard Layer Status
    oled_write_P(PSTR("Layer"), false);

    switch (get_highest_layer(layer_state)) {
        case 0:
            oled_write_P(PSTR("main\n"), false);
            break;
        case 1:
            oled_write_P(PSTR("secnd\n"), false);
            break;
        case 2:
            oled_write_P(PSTR("numbe\n"), false);
            break;
        default:
            // Or use the write_ln shortcut over adding '\n' to the end of your string
            oled_write_ln_P(PSTR("whut"), false);
    }

    // Host Keyboard LED Status
    led_t led_state = host_keyboard_led_state();
    oled_write_P(PSTR("    "), false);
    oled_write_P(PSTR("    "), false);
    oled_write_P(PSTR("    "), false);
}

// static void render_current_wpm(void){
//     oled_write_P(PSTR("WPM\n"), false);
//     oled_write(get_u8_str(get_current_wpm(), '0'), false);
// }


bool oled_task_user(void) {
    if ( is_keyboard_master() ) {
	render_layers();
	return true; // return true to keep the default render
    } else {
	render_tux();
        oled_set_cursor(0, 7);
	oled_write_P(PSTR("tux"), false);

        oled_set_cursor(0, 9);
        // render_current_wpm();

	return false;
    };
}


void oled_render_boot(bool bootloader) {
    oled_clear();
    for (int i = 0; i < 16; i++) {
        oled_set_cursor(0, i);
        if (bootloader) {
            oled_write_P(PSTR("Firmware"), false);
        } else {
            oled_write_P(PSTR("Rebooting"), false);
        }
    }
    oled_render_dirty(true);
}

bool shutdown_user(bool jump_to_bootloader) {
    oled_render_boot(jump_to_bootloader);
    oled_scroll_left();
    return false;
}
